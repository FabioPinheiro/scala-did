package fmgp.did.demo

import zio._
import zio.json._
import zio.json.ast.Json
import fmgp.did._
import fmgp.did.comm._
import fmgp.crypto._
import fmgp.did.resolver.peer._
import fmgp.multibase._
import fmgp.multibase.Base.Base58BTC
import fmgp.util.Base64
import fmgp.did.example.Agent0Mediators
import fmgp.did.example.Agent1Mediators

/** didExampleJVM/runMain fmgp.did.demo.ExampleMain */
@main def ExampleMain() = {
  import Operations._
  val data =
    """{"ciphertext":"U0giD6QwY6Pyh8sMaCjPHwho2QfiK2gGJHnXGqoP5zQzuEt62Nt8avycr6O3MUxNEjfjmLgVPRobPE5snLP075vdm6QmZHTQwqcoJ2j0HHJ9ptdHNTlS5g_QL1bGLU_lzAert2rmWZ7KWyGJ5DmMvpSJQxdiV_iincW2Jf3Aom6ghZIKORsG96a07AtR5QTRhJJFivvZirQSSItyOGfWBy0HmModna9SOJ34aOxN7ofC6ppIzjcSzHQv9dK-5BN2d2ydNn_4nBcdbvAeLylrYE126H7fdUaP4_eSQliYr2mEo0gtD-iphNDw0K3laVxN9GeFUwC80bvXD08nSW99eNn9ZenF7t5lXTPpt-LCNhhzMdHRc91O_4wfGpSQWxSzI4NtuCJdGqYxFM-6xQl2hnui8ILZx5LZsbelLNGFDS_HuufAw15wcGglNs73sXln9mZNIjVCk1u1wPScA7xSMTgxLdCuX49sRiNHR2TFihk7xm-7oqEHKR0jfq0BP-GEi5ACqXz2KJb58AuSvYnnpnPF_EkeV3PVt0q_FOdnFZfLH4GUfQEqzY6JmYko-csFgJxXcL3S3jwZZoEU8pZlIAmQim7xxffmWKbTcvR37oX6luxlYnM61sPjwnD36e2wFP2xS1c3WtYWg1zkrrEWFQ3VXy1cKqHTb8jIDGyPc_IxgWtOqvu70NPU0WnmWXBAbSlismofKKOPf4AgRly7CNdMb0z6jgRvtG6bCUGy5RzM0tcsB1-4tLaGJr-Vsi5YsvBo6zIZG9T_0iyEg-zZHKMftlCKIbVXGaHUqdraxpXNVf_Ooysz-TvpDsIk3aGDdaGF4vFrodQWk6jaFenGvsxkt3pYqm_taxRAicAmD5MQ1vhjWtOEsNBjUeakdh_KUyoU8iDxjBEi-aynJPu_hMFUNYnJq2q2st4_DZBA8N3WZpzuK6QYc3do4kOj3xTuwvPyAp61r1ISnBFtaL6zYyBk06gMI2umJHx4mLqYdSkFlAAWGE2wfH9biuJIZgnROpnqPStV4HLz96ozkD0hKDxcjwYGpsZZslaUGeYGMTMuBEPL0Tqe9_b-zX4sfLI0Xzz6dmu6XbJV7N4_5a2XLkKfW3CcpJfvjAPrV6nzx7goecY4TWkpT8YP6-EbVfxiBKRI1X2e6bKzhGGBTS8sf2dMpvIxHcQrlkICy23oShAeipUUCinSjAWN7oejgRTSSARJ_JCBOWoiKzR3ted-3l8heTvKDU1gtJ2XARe7p_hBxob82GnEqv_Xeo2_78huMxfvQ4RoOgqvEG7Ix8vRNET6ranYQe8wP03fX2kUlff2IUV7AFUrbBEq_uytouCFMFOLONi_vgBc8R1pS3Bk1ITsZ9iNX5kT6KZDq-lyE0R_WIqF_sVKHZa8Dh1Egrc2jQ4P8dTPgEtrSr2PNO-00LlT1e1DEXhpFOJptwwpyxgm62fAQevSyU7duZEpN9fZMOVGthoZdUsuyv-5FhxA1ZIlxDipLYqyhcw0Rz6xt_qLAEvt_N-t_CXVTHQxP5n5SD6pwflwUlqeeyeQyXJVm1K9DQ_8c5MbvMMKWTQ65Op5dZtXVu9qNrfrlXnpoRAgh3uAwYg5UGfs8DHLg5pNONYapkJT5RCpJi3jmhx2FoB2Sz88FBUmcKbuoOfYPHfnZcMH8PvHxGjVmADYAf4uKra6chrDiLKc3FfQWNQPl12IOb7wPY0rj07ywVqvp8-kdg-zkYgCvj29m28fTyJ-jbGBDMwDjs5aS_sj3b-1N5-zpJQpK4TvBXVIAjp7clPXCeqE72OOHPEbowGs2TAm0NCFgMe-DN5KEDoyltJDlq1oay0B5WzXEVgmZkCbcX0bS46Iup9Jay80vW5TpOvBuHlRD47GynQohd3I2Z9KiS5e-DL5TChdNqAzH6yDhCEuB-VCrXviXGssDCk9FjPFyEpKC4gY-CNuNk9LUlBxMpeEaMEE1RJHD_2xLj7Mopo4waaKg3w_Q-PGcjBexIV5qINmjsPOXo-MXwg9gErFvs-9QznEMQo5rLPoX7nbFKAKSOTpsArPmDskykq70OjXeW8O_j18lhqO1WX292w8OQU4hx3gZ9vJxthjXLODD3d7RwdrjGXet2SkMJztURsKFHfOwt1Aka_OHqPz3-1Ba8ipoI0XhTrLsRJ7yZQwxmjWyXHlAqJLAdDeMX0gRtR7iGVlfgNUDtiWaIXQyaaoHhXgHUOKcLQPDESB1ZL8SE9KEIgDe0a77HPk0ioACgLcjo4ft-o0d8S0mcn-zT722Z4-FA8Swc9Vp7Wfl4ksCxXA_n9WeQUNAA-_vrtQmPrTzE65AAGh4wKrEonjYu8rfjNT29aPmotSuMCFn-jhASfeuh9FVGg0nhRvbzOeIdgE9ZkT9yOu1Oiqlz7i7A6oco5RshocB2F_mmMzPJqWNTaS47L3weqoqewjtKpqbo1Fo9PAJNexz8fQ7ocvzMsAbJTc6wZUaNVI0Q3NWZP4yXQBNXxXNc7jS4KwGwmLiuKysSewuV1ID4O9gjiaKPhaEvKkiIvyek89cfm_9Xzf_dz4fjx1Jekc0m7ls_4rn4gIjH5uKWlc_f6-TPhfJGodA3wmAnlXn4mGYKnHs2qQ_f06KUCArPHLdAgQpmxaRps2hwCj3JusaVonsYQMJF3fr5OFqtmzflSSex3vamG94Calc6a3GfossXQooNiSLPqhaA8oYVUugnnj3s-6yJbkX_q4MvmQ2l09kCJJOD_6uJU2__2iHrWR0mLtHM6YoIawk9aq0wUQIV8U1N5srFPHlZoNs0dvVdDAVOWxLtNDPxK4eFbdwUYah9_wj5t06j2v-1CHvBQnldlD1JRW9b2fBaycv6nQlXfPX_PwLKuJZ7fYfBwEtEwMTw7VUHFsqYD7P4rpEDj-CAmqerQ5ck3aOWgZtEFU6bFS1Yw5n_4dNhdhReShrp58WTYObnAZueG87iJiolS59B4tsVoaf9Heu3WJ9bE0ZDWb_LP8Y4XRk2tM5aS8CLHojHaqSExE9633Z_11UyuYTy1QJtgkNZMn3Rm5BpsGxAhdsZWnE_1GCd59stp9k8Xo1hz8tMc1qt2A8Om0ZF1NgqNWdYFKg1Z7N_B_o2pwFEY2AYJaP7gY5t-dklcBNegf_N2lASxMVCoumG3o295okSz3XdNaAb32Q-a2G52-L_Vfi-tYqiIk-J9Y7I95Yxeln9wgkw7BfKd7e2-B65X52Bntp2ht1qPYwhcU5jDmaIdr5QSDnymU5AicallzwGsD1J7y7c2vxMaI58HeGoVwJXthZl2lRuM7Gud0nLF-n9AsSz5Hi6iEAJWHjpxE6JAuwWzXQO0_WzTsnDiCrcHCNlY1BMaeTwwe72i5fMOxnbedh-q43SPSdS6xwa4jMdBU_UPxeK86M8rsEJCZtdmoEGY9Kv2sxXZnzoX_AIfLzzcVQfg_oxCKwWjwMDhMktDs5YRKERGuqskuZn3AUoddMJd11RT56jcDkqR3fB0RnDXl60NV15f-5yo0r8LG8UWzVDQDq0xbbyBIduql6tK6xJUKFO4m0l4hTcNIYHQtUKY78SeIYq1oBy2CvMm76LPq88Al-7Ssp-aJcYW1EPrPdDU4pV8oOLZH9hDL7cTA-SizmKxtZgdyRlvwALICrF2tKRFsT9KBX5hEz4CvQYYLCQfPjg2dDPZx2xRBuAdXkiuwx2Rpn9fhp4vAnWyRewpLd90Cm7CbYyQOJCK37AtJ-ZFNld_5mL5yjuITI1cgSbyCVcagrv75eu8_XVSx7GYSb0P5gK4yLwBHmQgvWuO0AU_4bntsSg_F5lCFcJx7OoXfplbqfPjzlNXjvPAf6tx0xl8zTOD7-mAzbHXwyDbqDejSnR5R_8kNDwLpb-_Hi8pPQFlEjz_vVSwcsWdjKnyB6GkXvBk2eYW1tjeX5Qkzo7qbLlDJfGovSnm6spJfTjAVnbeq1bjKOOr4wPcft7V7vOyff7_iI_oQcf0Cv-QOSaptWQS9EBXQKqjj_q8zIvnpDfOt0b8ms_vnPs16FkKXzXh_0lBWxKyoOcAtfbLkVUILpNYto8aawaD_N421sbL6VXSx1XWOiVxO3xHiHpXc6MoAxAzZB3fm-mqPwedMGWWt8t1yc_KeUejIl3fgmDlJ_VVDk65MRPSubV7GzOROSzni6_e7W6nQC92hSiFLYQY2h56VYGC5Q9w0EbJl4Y8lHx9vxpjiHXbajG_n40zYMTwSsVGalrvFXIbSbmnpHorM0NCjq0ZWau7xmLMehZOolFTJb0QQawW9fqJrYknckw80qiSCqmk7WF5BjxMSAtR-D3A9nwm_QbO91HU__FXtB0jPFzrP_jHdCh8qj9s5VLTmTF6BOLCEm3MHWdGUB2UvA9oYKzowJpp1Jy1xjQ6JhbS4aG4vrj092EtIsvKE1Mgu-Hj8tx00gFZpKvPPCi2K6d299zzS1MzYeRk1irqJZ9usgXbxYUBUUk-IPVrp2qNXFayp-VLC1qaarieEy1Q_q4zLXND9oNdIYcyKSCMr9sNCoV6MhEH1PsNUmrcqkOaHmzUznqty6M4P2D0NjRP7B8SgGazKzIEQBTQb7KYlSKZogzVay5LuGXwIJjOeSTF_j1YwC8Oy4Gpe8JiST6O5QmLo9eQSDwHUshQQC5E6NGKrVqtg4nw6QsDcUiWJMZbk5ynptd10IpTZmy8kaSC-qCwHqVF-H9x-pdu0Do_oBRsqI39JtFqGG818IwmXYKblt7N7-RDF2hblBX-y80CPkm_FYCH6sZoMfBpGUy_eZksZMU79Gnz_t69N4vAs6SP5z1y55bY6BLYeyk_8gjMy4Lh21VnNmhJvQ6fY94QbtjxmNRaRLfNlKpotIUAnFqOzUy-jdtkNB84KyytOZO5L2hveM4TSiRjHkTxsMbCzLCIMazzVSjqKd1Tdaao0RBNB1cIo_Nv6t2FQN5hCBLrF1wstHHosiYml6e8WR9_wiF8h-TDVk5vqM2EDa4qmxikJB1-J_Yc9pO0cYnOPBE_8IAhlxhRoIWVZUSLjQQlxZK1spFvxyw1O3JUqI0kG_t-ZG1jcqZlqnrGRAGDLDz8VkB-ac9Mm1bCy9W2VUTCYT2GX8PPpv4I7VxlhM2efsDCbMCN7GSTjL9njWiRlviwHbKVKum5590w9Gu79Wwe0nrpK2Dx97ouMd72O3jYEqBPk72Mq0pCzNgBBPnHEWHKMobjJcfuuslflsUR7QpHeFX0kB4z5PJiU6TByK6k-Lbk-UQQtNEKielBP-9z060xyTLY1Jco1Bk2xOK1nBAKfgeX16W7TG26DG-IoonMw6pc-FQ_ozdju7dbcVhpweUOKkSwCU8UX7D-Uj-8RMFLBqovXSMz9N3JnVlnlOtSziQo6OlT4sqAHwbMQry5Yeh-gKzmtgV26PelWZWSZhV75xWP1UwzuB0cBRqo4XqPQuAE6oJGvfmBpEjWoQwJB4FYFG1xS7h7k72Or1DGwBn4bNSM2vbTSISy0A8lCf2w88uO1q0VElAN88d2lfA0In1Hsx7ly13Sj1eGXka-u492vzdRMxaSScx0QwIRmRSKeQwX0kfrpvz9yCZTEdue_MHUFX4RJEkmT4YDFUB0YuxK0I4tG1LZ31A4H_2Kp-dem2yTfeSiGYcgikQ","protected":"eyJlcGsiOnsia3R5IjoiT0tQIiwiY3J2IjoiWDI1NTE5IiwieCI6IkJPN09VaENVellNemFfTUZ1aHVpeXFiN085bzRQRTk1RVhTdWpYMHlHUUUifSwiYXB2IjoicFpXOFdTWm9YNnNrXzNaRm1ramFtWXBpOGZGUVlwQ3h2RFBlaUJwT3BrMCIsInNraWQiOiJkaWQ6cGVlcjoyLkV6NkxTcHBaYmtMVEpOMm5nRDF2YVhFV2MycTc5OE1DRjNKQzlReWNZWlZwQkVpMlIuVno2TWtoUDhONmp5eng3MmdVQlQyYnVpcVE3VE1WRVFBNENoY3ZLVVBNYmVWN1hjTSM2TFNwcFpia0xUSk4ybmdEMXZhWEVXYzJxNzk4TUNGM0pDOVF5Y1laVnBCRWkyUiIsImFwdSI6IlpHbGtPbkJsWlhJNk1pNUZlalpNVTNCd1dtSnJURlJLVGpKdVowUXhkbUZZUlZkak1uRTNPVGhOUTBZelNrTTVVWGxqV1ZwV2NFSkZhVEpTTGxaNk5rMXJhRkE0VGpacWVYcDROekpuVlVKVU1tSjFhWEZSTjFSTlZrVlJRVFJEYUdOMlMxVlFUV0psVmpkWVkwMGpOa3hUY0hCYVltdE1WRXBPTW01blJERjJZVmhGVjJNeWNUYzVPRTFEUmpOS1F6bFJlV05aV2xad1FrVnBNbEkiLCJ0eXAiOiJhcHBsaWNhdGlvblwvZGlkY29tbS1lbmNyeXB0ZWQranNvbiIsImVuYyI6IkEyNTZDQkMtSFM1MTIiLCJhbGciOiJFQ0RILTFQVStBMjU2S1cifQ","recipients":[{"encrypted_key":"c7XhowLVuquZg6RHkomh316LxOGKMyFUqKfXTO2gog_kxEqD8OKEBgRcn-_FkJisVHaAF0sCHetodMzyiEZvG0ln0eFQRRtr","header":{"kid":"did:peer:2.Ez6LSpou63sBDB4FGpbVM23bECgZnkMHj6hGmA3PgQByR9fs4.Vz6MkhNpHBCUgBgkCbiM4zMjrbfgGowwEuEchmzf6J5W3av8E.SeyJ0IjoiZG0iLCJzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6ODA4MC8iLCJyIjpbXSwiYSI6WyJkaWRjb21tL3YyIl19#6LSpou63sBDB4FGpbVM23bECgZnkMHj6hGmA3PgQByR9fs4"}}],"tag":"o4NlnjRNx3pfg6YxIQZQrEZB3XHGoZoAPjWIjs9YkH4","iv":"-rwQrmqrIDj_aKHDP7nSsA"}"""
  val message = data.fromJson[EncryptedMessage].getOrElse(???)

  val program = for {
    _ <- Console.printLine("""### Example Main ###""".stripMargin)
    _ <- Console.printLine(message.toJsonPretty)
    // afterDecryot <- anonDecrypt(message) // FIXME
    msgAfterDecrypt <- authDecrypt(message).provideSomeLayer(Agent0Mediators.agentLayer)
    _ <- Console.printLine(msgAfterDecrypt.toJsonPretty)
    _ <- Console.printLine("#" * 80)
    // msg2 = msgAfterDecrypt.asInstanceOf[PlaintextMessageClass]
    // afterDecryot <- authDecrypt(message).provideSomeLayer(Agent1Mediators.agentLayer)
  } yield ()

  val operations: ULayer[Operations] = ZLayer.succeed(new MyOperations())
  val resolvers = ZLayer.succeed(DidPeerResolver)

  Unsafe.unsafe { implicit unsafe => // Run side efect
    Runtime.default.unsafe
      .run(program.provide(operations ++ resolvers))
      .getOrThrowFiberFailure()
  }
}
