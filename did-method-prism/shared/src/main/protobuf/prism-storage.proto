syntax = "proto3";

import "scalapb/scalapb.proto";
option (scalapb.options) = {
  package_name: "proto.prism"
  flat_package: true
  java_conversions: false
  lenses: false
  getters: false
  retain_source_code_info: false
  no_default_values_in_constructor: true
  scala3_sources: true
};

// **********************
// *** Storage Events ***
// **********************

/* Notes:
 *
 * A Storage Event can be one of three types:
 *  - ProtoCreateStorageEntry
 *  - ProtoUpdateStorageEntry
 *  - ProtoDeactivateStorageEntry
 * Those three types/structures are independent. But at the same time (just for implementation convenience),
 *   they shared a common structure / field positions.
 *
 * The fields from positions 1 and 2 are reserved and used in the validation process of the Storage Events (currently).
 * The fields from positions 3 to 49 are reserved to be used in the validation process of the Storage Events (in the future).
 *   If one of those fields/position are present (in a valid event) the Indexer MUST consider the Storage Entry unsupported (not valid) from that moment, forward.
 * The fields from positions 50 to 99 are for adding relevant metadata that does not impact the validation process of the Storage Events.
 */

/** StorageEventCreateEntry
 * To be valid, this Event MUST be signed by an issuing key of the DID:
 *   1) The issuing key MUST be valid at the Event moment.
 *   2) The DID MUST not be Deactivated.
 */
message ProtoCreateStorageEntry {
  reserved 2; // These positions are reserved by ProtoUpdateStorageEntry & ProtoDeactivateStorageEntry
  reserved 3 to 49; // These fields will be used for validation the Storage Events in the future
  bytes did_prism_hash = 1; // The specificId of the did:prism.
  bytes nonce = 50; // Used to generate different reference hash (to make different entries with the same initial data possible)
  oneof data {
    // Nothing // The data field MAY be omitted representing ANY type.
    bytes bytes = 100;
    string ipfs = 101; // The string MUST be a CID.

    // ... future expansions
  }
}

/** StorageEventUpdateEntry
 * To be valid, this Event MUST be signed by an issuing key of the DID:
 * - 1) The issuing key MUST be valid at the Event moment.
 * - 2) The DID MUST not to be Deactivated.
 */
message ProtoUpdateStorageEntry {
  reserved 1, 50; // These positions are reserved by ProtoCreateStorageEntry
  reserved 3 to 49; // These fields will be used for validation the Storage Events in the future
  bytes previous_event_hash = 2; // The hash of the most recent event that was used to create or update the VDR Entry.
  oneof data {
    bytes bytes = 100; // Replace the bytes
    string ipfs = 101; // Update/replace the data with a CID to IPFS. The string MUST be a CID.

    // ... future expansions
  }
}

message ProtoDeactivateStorageEntry{
  reserved 1, 50; // These positions are reserved by ProtoCreateStorageEntry
  reserved 3 to 49; // These fields will be used for validation the Storage Events in the future
  bytes previous_event_hash = 2; // The hash of the most recent event that was used to create or update the VDR Entry.
}
